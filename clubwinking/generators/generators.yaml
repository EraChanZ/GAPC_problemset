solution: /submissions/accepted/author_solution.py
#visualizer: /visualizers/asy.sh {name}
# By default, generated files are not ignored.
#gitignore_generated: false

data:
  sample:
    type: directory
    # Uncomment to disable generating ans files for sample cases.
    #solution:
    data:
      # Some small examples showing to help understanding of the problem
      #'1':
      #'2':

  secret:
    type: directory
    data:
      # You can re-use the input validator by symlinking it as `generator` in
      # this directory. Below is some inspiration for test cases.
      #
      # Use `-X` to set the value of variable `X`, as provided to the `read_*` functions.
      # Use `min` and `max` to set variables to their minimum and maximum
      # allowed values.
      #- min: generator {seed} -n min -k min -ai min
      #- max: generator {seed} -n max -k max -ai max
      # Leave a variable out to pick a uniform random value.
      #- random_a: generator {seed} -n max
      # Provide an explicit list of values:
      #- binary: generator {seed} -ai 0,1
      # Provide probabilities for each value:
      #- mostly_0: generator {seed} -ai 0:0.99,1:0.01
      # Uniform random values in range:
      #- small_a: generator {seed} -n 10 -ai 1..100
      # Use a geometric distribution (see validation.h for more):
      #- geometric: generator {seed} -n 100 -k 123 -ai geometric(0.1)

      # Manual cases can be added like this:
      #- handcrafted: manual/handcrafted.in
      # They should be written to somewhere inside generators/ and will be
      # copied into data/.
      # You can also dump them in data/secret and run `bt generate --add-manual`
      # followed by `bt generate --move-manual`.

      # Typically, small test cases are more likely to find bugs/edge cases.
      # When the limit on n is 1000, do something like:
      - small: testcase_generator.py 2452435 2 10 10 100
      - small: testcase_generator.py 3634565 1 30 50 100
      - small: testcase_generator.py 2983589 2 5 100 20
      - small: testcase_generator.py 83465039 3 15 100 100
      - small: testcase_generator.py 293849023  7 20 100 100
      - small: testcase_generator.py 29384 20 10 100 100
      - small: testcase_generator.py 2324923 20 10 100 100
      - small: testcase_generator.py 322344 20 10 100 100
      - medium: testcase_generator.py 324955 2 100 500 50
      - medium: testcase_generator.py 2439854 12 200 500 100
      - medium: testcase_generator.py 245455 24 150 500 100
      - medium: testcase_generator.py 92932 12 200 1500 100
      - medium: testcase_generator.py 253984 24 150 500 100
      - large: testcase_generator.py 2454895 50 850 1000 50
      - large: testcase_generator.py 2543344 20 900 1000 100
      - large: testcase_generator.py 9295934 30 1000 500 1000
      - large: testcase_generator.py 746935 10 1000 1000 100
      - large: testcase_generator.py 23583890 50 1000 10000 1000

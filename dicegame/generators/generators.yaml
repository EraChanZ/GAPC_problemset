solution: /submissions/accepted/author_solution.cpp
#visualizer: /visualizers/asy.sh {name}
# By default, generated files are not ignored.
gitignore_generated: true

data:
  sample:
    type: directory
    # Uncomment to disable generating ans files for sample cases.
    solution: /submissions/accepted/author_solution.cpp
    data:
      # Some small examples showing to help understanding of the problem
      'sample_1': stdout.py 2 2
      'sample_2': stdout.py 3 4

  secret:
    type: directory
    data:
      - trivial: stdout.py 1 1
      - trivial: stdout.py 1 2
      - trivial: stdout.py 1 3
      - trivial: stdout.py 2 1
     #- trivial: stdout.py 2 2
      - trivial: stdout.py 2 3
      - trivial: stdout.py 3 1
      - trivial: stdout.py 3 2
      - trivial: stdout.py 3 3
      - manual: stdout.py 1 1000
      - manual: stdout.py 2 1000
      - manual: stdout.py 3 1000
      - manual: stdout.py 1000 1
      - manual: stdout.py 1000 2
      - manual: stdout.py 1000 3
      - manual: stdout.py 999 999
      - manual: stdout.py 999 1000
      - manual: stdout.py 1000 999
      - manual: stdout.py 1000 1000
      - tiny: generator {seed:01} -n 2..5 -m 5..10
      - tiny: generator {seed:02} -n 2..5 -m 5..10
      - tiny: generator {seed:03} -n 2..5 -m 5..10
      - tiny: generator {seed:04} -n 2..5 -m 5..10
      - tiny: generator {seed:05} -n 2..5 -m 5..10
      - small: generator {seed:01} -n 5..10 -m 2..10
      - small: generator {seed:02} -n 5..10 -m 2..10
      - small: generator {seed:03} -n 5..10 -m 2..10
      - small: generator {seed:04} -n 5..10 -m 2..10
      - small: generator {seed:05} -n 5..10 -m 2..10
      - medium: generator {seed:01} -n 10..100 -m 2..100
      - medium: generator {seed:02} -n 10..100 -m 2..100
      - medium: generator {seed:03} -n 10..100 -m 2..100
      - medium: generator {seed:04} -n 10..100 -m 2..100
      - medium: generator {seed:05} -n 10..100 -m 2..100
      - medium: generator {seed:06} -n 10..100 -m 2..100
      - medium: generator {seed:07} -n 10..100 -m 2..100
      - medium: generator {seed:08} -n 10..100 -m 2..100
      - medium: generator {seed:09} -n 10..100 -m 2..100
      - medium: generator {seed:10} -n 10..100 -m 2..100
      - large: generator {seed:01} -n 100..1000 -m 2..1000
      - large: generator {seed:02} -n 100..1000 -m 2..1000
      - large: generator {seed:03} -n 100..1000 -m 2..1000
      - large: generator {seed:04} -n 100..1000 -m 2..1000
      - large: generator {seed:05} -n 100..1000 -m 2..1000
      - low: generator {seed:01} -n 1..10 -m 2..1000
      - low: generator {seed:02} -n 1..10 -m 2..1000
      - low: generator {seed:03} -n 1..10 -m 2..1000
      - low: generator {seed:04} -n 1..10 -m 2..1000
      - low: generator {seed:05} -n 1..10 -m 2..1000
      - high: generator {seed:01} -n 100..1000 -m 2..10
      - high: generator {seed:02} -n 100..1000 -m 2..10
      - high: generator {seed:03} -n 100..1000 -m 2..10
      - high: generator {seed:04} -n 100..1000 -m 2..10
      - high: generator {seed:05} -n 100..1000 -m 2..10
      # You can re-use the input validator by symlinking it as `generator` in
      # this directory. Below is some inspiration for test cases.
      #
      # Use `-X` to set the value of variable `X`, as provided to the `read_*` functions.
      # Use `min` and `max` to set variables to their minimum and maximum
      # allowed values.
      #- min: generator {seed} -n min -k min -ai min
      #- max: generator {seed} -n max -k max -ai max
      # Leave a variable out to pick a uniform random value.
      #- random_a: generator {seed} -n max
      # Provide an explicit list of values:
      #- binary: generator {seed} -ai 0,1
      # Provide probabilities for each value:
      #- mostly_0: generator {seed} -ai 0:0.99,1:0.01
      # Uniform random values in range:
      #- small_a: generator {seed} -n 10 -ai 1..100
      # Use a geometric distribution (see validation.h for more):
      #- geometric: generator {seed} -n 100 -k 123 -ai geometric(0.1)

      # Manual cases can be added like this:
      #- handcrafted: manual/handcrafted.in
      # They should be written to somewhere inside generators/ and will be
      # copied into data/.
      # You can also dump them in data/secret and run `bt generate --add-manual`
      # followed by `bt generate --move-manual`.

      # Typically, small test cases are more likely to find bugs/edge cases.
      # When the limit on n is 1000, do something like:
      #- small: generator {seed} -n 1
      #- small: generator {seed} -n 2
      #- small: generator {seed} -n 3
      #- small: generator {seed} -n 7
      #- small: generator {seed} -n 13
      #- medium: generator {seed} -n 85
      #- medium: generator {seed} -n 103
      #- medium: generator {seed} -n 243
      #- large: generator {seed} -n 991
      #- large: generator {seed} -n 999
      #- large: generator {seed} -n 1000

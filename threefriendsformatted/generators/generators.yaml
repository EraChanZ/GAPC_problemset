solution: /submissions/accepted/ThreeFriends.cpp
#visualizer: /visualizers/asy.sh {name}
# By default, generated files are not ignored.
#gitignore_generated: false

data:
  sample:
    type: directory
    # Uncomment to disable generating ans files for sample cases.
    solution: /submissions/accepted/ThreeFriends.cpp
    data:
      # Some small examples showing to help understanding of the problem
      #'1':
      #'2':

  secret:
    type: directory
    data:
      # You can re-use the input validator by symlinking it as `generator` in
      # this directory. Below is some inspiration for test cases.
      #
      # Use `-X` to set the value of variable `X`, as provided to the `read_*` functions.
      # Use `min` and `max` to set variables to their minimum and maximum
      # allowed values.
      #- min: generator {seed} -n min -k min -ai min
      #- max: generator {seed} -n max -k max -ai max
      # Leave a variable out to pick a uniform random value.
      #- random_a: generator {seed} -n max
      # Provide an explicit list of values:
      #- binary: generator {seed} -ai 0,1
      # Provide probabilities for each value:
      #- mostly_0: generator {seed} -ai 0:0.99,1:0.01
      # Uniform random values in range:
      #- small_a: generator {seed} -n 10 -ai 1..100
      # Use a geometric distribution (see validation.h for more):
      #- geometric: generator {seed} -n 100 -k 123 -ai geometric(0.1)

      # Manual cases can be added like this:
      #- handcrafted: manual/handcrafted.in
      # They should be written to somewhere inside generators/ and will be
      # copied into data/.
      # You can also dump them in data/secret and run `bt generate --add-manual`
      # followed by `bt generate --move-manual`.

      # Typically, small test cases are more likely to find bugs/edge cases.
      # When the limit on n is 1000, do something like:
      - small: generator {seed:141178432}   -k 5..50 -xi 0..1000
      - small: generator {seed:14672422} -k 5..50 -xi 0..1000000
      - small: generator {seed:1467823432} -k 5..50 -xi 0..1000000
      - small: generator {seed:111122} -k 5..50 -xi 0..100000000
      - small: generator {seed:146248432}  -k 5..50 -xi 0..10
      - small: generator {seed:1467232332} -k 5..50 -xi 0..10000000
      - small: generator {seed:14678233432} -k 5..50 -xi 0..100000000
      - small: generator {seed:2338432} -k 5..50 -xi 0..100000000
      - small: generator {seed:923923} -k 5..50 -xi 0..10000
      - small: generator {seed:3448432}  -k 5..50 -xi 0..100000000
      - medium: generator {seed:94399834}  -k 1000..10000 -xi 0..1000000000000
      - medium: generator {seed:5223234} -k 1000..10000 -xi 0..10000
      - medium: generator {seed:243479834} -k 1000..10000 -xi 0..10000000
      - medium: generator {seed:55346834}  -k 1000..10000 -xi 0..1000000000000
      - medium: generator {seed:59329834} -k 1000..10000 -xi 0..1000000000
      - medium: generator {seed:5228334} -k 1000..10000 -xi 0..1000000000000
      - large: generator {seed:2324498} -k 100000..500000  -xi 0..1000000000000
      - large: generator {seed:2343984298} -k 100000..500000  -xi 0..10000
      - large: generator {seed:43384298} -k 100000..500000 -xi 0..1000000000000
      - large: generator {seed:23444298} -k 100000..500000 -xi 0..1000000000
      - large: generator {seed:239998} -k 100000..500000 -xi 0..1000000
      - large: generator {seed:2931298} -k 100000..500000 -xi 0..1000000000000
